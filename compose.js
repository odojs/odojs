// Generated by CoffeeScript 1.9.1
var VText, create, diff, patch, raf, time;

create = require('virtual-dom/create-element');

diff = require('virtual-dom/diff');

patch = require('virtual-dom/patch');

VText = require('virtual-dom/vnode/vtext');

raf = require('raf');

time = function(description, cb) {
  var endedAt, startedAt;
  startedAt = new Date().getTime();
  cb();
  endedAt = new Date().getTime();
  if ((typeof window !== "undefined" && window !== null ? window.hub : void 0) != null) {
    return window.hub.emit('{description} in {duration}ms', {
      description: description,
      startedAt: startedAt,
      endedAt: endedAt,
      duration: endedAt - startedAt
    });
  }
};

module.exports = function(component, state, params, parent) {
  var apply, payload, status, target, tree;
  status = 'init';
  tree = null;
  target = null;
  time('scene created', function() {
    tree = component(state, params);
    return target = create(tree);
  });
  status = 'idle';
  apply = function(state, params) {
    if (status === 'rendering') {
      throw new Error('Mutant rampage');
    }
    status = 'rendering';
    time('scene updated', function() {
      var newTree, patches;
      newTree = component(state, params);
      patches = diff(tree, newTree);
      target = patch(target, patches);
      return tree = newTree;
    });
    return status = 'idle';
  };
  payload = null;
  return {
    target: target,
    status: status,
    mount: function() {
      return parent.appendChild(target);
    },
    update: function(state, params) {
      if (status === 'rendering') {
        throw new Error('Mutant rampage');
      }
      if (status === 'pending') {
        payload = {
          state: state,
          params: params
        };
        return;
      }
      if (status === 'idle') {
        status = 'pending';
        payload = {
          state: state,
          params: params
        };
        return raf(function() {
          if (payload === null) {
            return;
          }
          apply(payload.state, payload.params);
          return payload = null;
        });
      }
    },
    apply: apply,
    unmount: function() {
      return patch(target, diff(tree, new VText('')));
    }
  };
};
