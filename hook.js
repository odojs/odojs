// Generated by CoffeeScript 1.9.1
var Hook, compose, create, dom, extend, hook;

create = require('virtual-dom/create-element');

compose = require('./compose');

extend = require('extend');

dom = require('virtual-dom/h');

require('setimmediate');

Hook = (function() {
  function Hook(component1, spec1, state1, params1) {
    this.component = component1;
    this.spec = spec1;
    this.state = state1;
    this.params = params1;
    if (this.spec.enter == null) {
      this.spec.enter = function(item) {
        return this.item.mount();
      };
    }
    if (this.spec.exit == null) {
      this.spec.exit = function(item) {
        return this.item.unmount();
      };
    }
    if (this.spec.transition == null) {
      this.spec.transition = function(olditem, newitem) {
        olditem.unmount();
        return item.mount();
      };
    }
  }

  Hook.prototype.type = 'Widget';

  Hook.prototype.create = function() {
    this.item = compose(this.component, this.state, this.params, this.el);
    return this.spec.enter.call(this.spec, this.item, this.state, this.params);
  };

  Hook.prototype.remove = function() {
    return this.spec.exit.call(this.spec, this.item, this.state, this.params);
  };

  Hook.prototype.init = function() {
    this.el = create(dom('div'));
    setImmediate((function(_this) {
      return function() {
        return _this.create();
      };
    })(this));
    return this.el;
  };

  Hook.prototype.update = function(prev, el) {
    var olditem;
    this.el = prev.el, this.item = prev.item;
    if (prev.component === this.component) {
      if (this.component == null) {
        return el;
      }
      this.item.update(this.state, this.params);
      return el;
    }
    if (prev.component == null) {
      this.create();
      return el;
    }
    if (this.component == null) {
      this.remove();
      return el;
    }
    olditem = this.item;
    this.item = compose(this.component, this.state, this.params, el);
    this.spec.transition.call(this.spec, olditem, this.item, this.state, this.params);
    return el;
  };

  Hook.prototype.destroy = function() {
    return this.remove();
  };

  return Hook;

})();

hook = function(spec) {
  var Component, i, len, plugin, ref;
  spec = extend({}, spec);
  Component = function(component, state, params) {
    return new Hook(component, spec, state, params);
  };
  Component.use = function(plugin) {
    return plugin(Component, spec);
  };
  ref = hook.plugins;
  for (i = 0, len = ref.length; i < len; i++) {
    plugin = ref[i];
    Component.use(plugin);
  }
  return Component;
};

hook.plugins = [];

hook.use = function(plugin) {
  return hook.plugins.push(plugin);
};

module.exports = hook;
