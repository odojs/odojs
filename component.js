// Generated by CoffeeScript 1.8.0
var VText, component, create, diff, extend, main, patch;

create = require('virtual-dom/create-element');

diff = require('virtual-dom/diff');

patch = require('virtual-dom/patch');

VText = require('virtual-dom/vnode/vtext');

main = require('main-loop');

extend = require('extend');

require('setimmediate');

component = function(spec) {
  var Component, plugin, _i, _len, _ref;
  spec = extend({}, spec);
  Component = function(state) {
    return spec.render.call(spec, state);
  };
  Component.use = function(plugin) {
    return plugin(Component, spec);
  };
  Component.mount = function(el, state) {
    var scene, _render;
    _render = function(state) {
      return Component(state);
    };
    scene = main(state, (function(state) {
      return _render(state);
    }), {
      create: create,
      diff: diff,
      patch: patch
    });
    el.appendChild(scene.target);
    return {
      update: function(state) {
        return setImmediate(function() {
          return scene.update(state);
        });
      },
      unmount: function() {
        _render = function() {
          return new VText('');
        };
        return scene.update({});
      }
    };
  };
  _ref = component.plugins;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    plugin = _ref[_i];
    Component.use(plugin);
  }
  return Component;
};

component.plugins = [];

component.use = function(plugin) {
  return component.plugins.push(plugin);
};

module.exports = component;
